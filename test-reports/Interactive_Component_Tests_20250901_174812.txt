
Running 8 tests using 1 worker

üé† Testing Carousel Deep Interactions...
Found 7 next buttons and 7 previous buttons
‚úÖ Next navigation working
‚úÖ Previous navigation working
Found 21 indicators
‚úÖ Indicator navigation working
Found 0 autoplay carousels
  ‚úì  1 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:19:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ Carousel Deep Interaction - Navigation, Indicators, and Autoplay (8.0s)
Console Warning: cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation
üìë Testing Tabs Deep Interactions...
Found 23 tabs
Testing tab: Account
Testing tab: Password
Testing tab: Notifications
‚úÖ Keyboard navigation working
  ‚úì  2 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:87:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ Tabs Deep Interaction - Switching, Content Updates, and State Management (3.0s)
Console Warning: At examples/src/dropdown_menu_examples.rs:101:69, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/dropdown_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/dropdown_menu_examples.rs:108:69, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/dropdown_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/dropdown_menu_examples.rs:115:69, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/dropdown_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/dropdown_menu_examples.rs:138:64, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/dropdown_menu_examples.rs:9:38) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/dropdown_menu_examples.rs:144:66, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/dropdown_menu_examples.rs:10:42) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/dropdown_menu_examples.rs:172:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/dropdown_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/dropdown_menu_examples.rs:179:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/dropdown_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/dropdown_menu_examples.rs:186:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/dropdown_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/dropdown_menu_examples.rs:193:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/dropdown_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/dropdown_menu_examples.rs:200:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/dropdown_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
üîΩ Testing DropdownMenu Deep Interactions...
Found 6 dropdown triggers
Found 10 menu items
‚úÖ Menu item selection working
Found 0 submenu triggers
Menubar content remained visible after close attempt; continuing test
  ‚úì  3 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:137:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ DropdownMenu Deep Interaction - Complex Menu Structures and Submenus (7.7s)
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:97:60, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/context_menu_examples.rs:9:38) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:360:19, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:347:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:103:62, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/context_menu_examples.rs:10:42) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:360:19, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:347:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:135:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:142:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:149:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:174:61, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:181:61, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:188:61, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:195:61, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:202:61, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:324:60, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/context_menu_examples.rs:9:38) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:360:19, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:347:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:330:62, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/context_menu_examples.rs:10:42) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:360:19, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:347:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:341:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:348:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
  ‚úò  4 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:216:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ ContextMenu Deep Interaction - Right-click, Positioning, and Context (30.2s)
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:97:60, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/context_menu_examples.rs:9:38) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:360:19, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:347:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:103:62, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/context_menu_examples.rs:10:42) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:360:19, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:347:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:135:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:142:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:149:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:174:61, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:181:61, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:188:61, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:195:61, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:202:61, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:324:60, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/context_menu_examples.rs:9:38) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:360:19, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:347:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:330:62, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/context_menu_examples.rs:10:42) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:360:19, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:347:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:341:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:348:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
  ‚úò  5 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:216:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ ContextMenu Deep Interaction - Right-click, Positioning, and Context (retry #1) (30.4s)
Console Warning: cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation
Console Warning: At examples/src/menubar_examples.rs:17:68, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/menubar_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/menubar_examples.rs:18:70, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/menubar_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/menubar_examples.rs:19:70, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/menubar_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/menubar_examples.rs:20:80, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/menubar_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/menubar_examples.rs:21:78, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/menubar_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/menubar_examples.rs:22:78, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/menubar_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:212:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:9:38) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:212:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:10:42) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:271:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:17:50) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:271:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:18:52) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:271:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:19:52) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:212:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:9:38) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:212:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:10:42) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:271:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:17:50) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:271:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:18:52) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:271:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:19:52) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:271:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:20:58) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:271:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:21:56) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:271:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:22:56) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:212:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:13:38) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:212:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:14:42) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
üçî Testing Menubar Deep Interactions...
Found 12 menubar triggers
Found 37 menubar items
Found 0 submenu triggers
‚úÖ Horizontal keyboard navigation working
  ‚úì  6 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:281:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ Menubar Deep Interaction - Multi-level Navigation and State Management (3.5s)
Console Warning: cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation
üìú Testing ScrollArea Deep Interactions...
Found 0 scroll areas
  ‚úò  7 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:351:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ ScrollArea Deep Interaction - Scrolling, Viewport, and Scrollbars (30.8s)
Console Warning: cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation
üìú Testing ScrollArea Deep Interactions...
Found 0 scroll areas
  ‚úò  8 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:351:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ ScrollArea Deep Interaction - Scrolling, Viewport, and Scrollbars (retry #1) (30.9s)
üçû Testing Toast Deep Interactions...
Found 0 toast triggers
Found 0 active toasts
Found 0 toast content elements
Found 0 toast actions
Found 0 toast close buttons
  ‚úì  9 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:420:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ Toast Deep Interaction - Multiple Toasts, Stacking, and Dismissal (5.3s)
Console Warning: cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation
üìù Testing Form Components Deep Interactions...
Found 0 text inputs
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Found 0 checkboxes
Found 0 radio buttons
Found 0 select dropdowns
Found 10 buttons
  ‚úò  10 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:485:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ Form Components Deep Interaction - Input, Validation, and State Changes (31.4s)
Console Warning: cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation
üìù Testing Form Components Deep Interactions...
Found 0 text inputs
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Found 0 checkboxes
Found 0 radio buttons
Found 0 select dropdowns
Found 10 buttons
  ‚úò  11 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:485:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ Form Components Deep Interaction - Input, Validation, and State Changes (retry #1) (31.6s)


  1) [chromium] ‚Ä∫ tests/interactive-components.spec.ts:216:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ ContextMenu Deep Interaction - Right-click, Positioning, and Context 

    TimeoutError: page.waitForFunction: Timeout 30000ms exceeded.

      218 |     
      219 |     // Wait for WASM to load
    > 220 |     await page.waitForFunction(() => {
          |                ^
      221 |       return !document.querySelector('.loading') && !document.querySelector('.spinner');
      222 |     });
      223 |     
        at /Users/peterhanssens/consulting/CloudShuttle/radix-ui/tests/interactive-components.spec.ts:220:16

    attachment #1: screenshot (image/png) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    test-results/interactive-components-Int-78785-ick-Positioning-and-Context-chromium/test-failed-1.png
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    attachment #2: video (video/webm) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    test-results/interactive-components-Int-78785-ick-Positioning-and-Context-chromium/video.webm
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    Error Context: test-results/interactive-components-Int-78785-ick-Positioning-and-Context-chromium/error-context.md

    Retry #1 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    TimeoutError: page.waitForFunction: Timeout 30000ms exceeded.

      218 |     
      219 |     // Wait for WASM to load
    > 220 |     await page.waitForFunction(() => {
          |                ^
      221 |       return !document.querySelector('.loading') && !document.querySelector('.spinner');
      222 |     });
      223 |     
        at /Users/peterhanssens/consulting/CloudShuttle/radix-ui/tests/interactive-components.spec.ts:220:16

    attachment #1: screenshot (image/png) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    test-results/interactive-components-Int-78785-ick-Positioning-and-Context-chromium-retry1/test-failed-1.png
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    attachment #2: video (video/webm) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    test-results/interactive-components-Int-78785-ick-Positioning-and-Context-chromium-retry1/video.webm
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    Error Context: test-results/interactive-components-Int-78785-ick-Positioning-and-Context-chromium-retry1/error-context.md

    attachment #4: trace (application/zip) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    test-results/interactive-components-Int-78785-ick-Positioning-and-Context-chromium-retry1/trace.zip
    Usage:

        pnpm exec playwright show-trace test-results/interactive-components-Int-78785-ick-Positioning-and-Context-chromium-retry1/trace.zip

    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

  2) [chromium] ‚Ä∫ tests/interactive-components.spec.ts:351:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ ScrollArea Deep Interaction - Scrolling, Viewport, and Scrollbars 

    TimeoutError: locator.evaluate: Timeout 30000ms exceeded.
    Call log:
    [2m  - waiting for locator('[data-radix-scroll-area-viewport]').first()[22m


      367 |     
      368 |     // Test vertical scrolling
    > 369 |     await firstScrollArea.evaluate((el) => {
          |                           ^
      370 |       el.scrollTop = 100;
      371 |     });
      372 |     await page.waitForTimeout(500);
        at /Users/peterhanssens/consulting/CloudShuttle/radix-ui/tests/interactive-components.spec.ts:369:27

    attachment #1: screenshot (image/png) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    test-results/interactive-components-Int-0eb01-ing-Viewport-and-Scrollbars-chromium/test-failed-1.png
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    attachment #2: video (video/webm) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    test-results/interactive-components-Int-0eb01-ing-Viewport-and-Scrollbars-chromium/video.webm
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    Error Context: test-results/interactive-components-Int-0eb01-ing-Viewport-and-Scrollbars-chromium/error-context.md

    Retry #1 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    TimeoutError: locator.evaluate: Timeout 30000ms exceeded.
    Call log:
    [2m  - waiting for locator('[data-radix-scroll-area-viewport]').first()[22m


      367 |     
      368 |     // Test vertical scrolling
    > 369 |     await firstScrollArea.evaluate((el) => {
          |                           ^
      370 |       el.scrollTop = 100;
      371 |     });
      372 |     await page.waitForTimeout(500);
        at /Users/peterhanssens/consulting/CloudShuttle/radix-ui/tests/interactive-components.spec.ts:369:27

    attachment #1: screenshot (image/png) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    test-results/interactive-components-Int-0eb01-ing-Viewport-and-Scrollbars-chromium-retry1/test-failed-1.png
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    attachment #2: video (video/webm) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    test-results/interactive-components-Int-0eb01-ing-Viewport-and-Scrollbars-chromium-retry1/video.webm
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    Error Context: test-results/interactive-components-Int-0eb01-ing-Viewport-and-Scrollbars-chromium-retry1/error-context.md

    attachment #4: trace (application/zip) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    test-results/interactive-components-Int-0eb01-ing-Viewport-and-Scrollbars-chromium-retry1/trace.zip
    Usage:

        pnpm exec playwright show-trace test-results/interactive-components-Int-0eb01-ing-Viewport-and-Scrollbars-chromium-retry1/trace.zip

    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

  3) [chromium] ‚Ä∫ tests/interactive-components.spec.ts:485:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ Form Components Deep Interaction - Input, Validation, and State Changes 

    TimeoutError: locator.click: Timeout 30000ms exceeded.
    Call log:
    [2m  - waiting for locator('button:not([aria-label*="Next"]):not([aria-label*="Previous"])').first()[22m
    [2m    - locator resolved to <button id="mobile-menu-button" class="md:hidden p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100">‚Ä¶</button>[22m
    [2m  - attempting click action[22m
    [2m    2 √ó waiting for element to be visible, enabled and stable[22m
    [2m      - element is not visible[22m
    [2m    - retrying click action[22m
    [2m    - waiting 20ms[22m
    [2m    2 √ó waiting for element to be visible, enabled and stable[22m
    [2m      - element is not visible[22m
    [2m    - retrying click action[22m
    [2m      - waiting 100ms[22m
    [2m    56 √ó waiting for element to be visible, enabled and stable[22m
    [2m       - element is not visible[22m
    [2m     - retrying click action[22m
    [2m       - waiting 500ms[22m


      564 |     if (buttonCount > 0) {
      565 |       const firstButton = buttons.first();
    > 566 |       await firstButton.click();
          |                         ^
      567 |       await page.waitForTimeout(500);
      568 |       console.log('‚úÖ Button click functionality working');
      569 |     }
        at /Users/peterhanssens/consulting/CloudShuttle/radix-ui/tests/interactive-components.spec.ts:566:25

    attachment #1: screenshot (image/png) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    test-results/interactive-components-Int-4597a-alidation-and-State-Changes-chromium/test-failed-1.png
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    attachment #2: video (video/webm) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    test-results/interactive-components-Int-4597a-alidation-and-State-Changes-chromium/video.webm
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    Error Context: test-results/interactive-components-Int-4597a-alidation-and-State-Changes-chromium/error-context.md

    Retry #1 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    TimeoutError: locator.click: Timeout 30000ms exceeded.
    Call log:
    [2m  - waiting for locator('button:not([aria-label*="Next"]):not([aria-label*="Previous"])').first()[22m
    [2m    - locator resolved to <button id="mobile-menu-button" class="md:hidden p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100">‚Ä¶</button>[22m
    [2m  - attempting click action[22m
    [2m    2 √ó waiting for element to be visible, enabled and stable[22m
    [2m      - element is not visible[22m
    [2m    - retrying click action[22m
    [2m    - waiting 20ms[22m
    [2m    2 √ó waiting for element to be visible, enabled and stable[22m
    [2m      - element is not visible[22m
    [2m    - retrying click action[22m
    [2m      - waiting 100ms[22m
    [2m    56 √ó waiting for element to be visible, enabled and stable[22m
    [2m       - element is not visible[22m
    [2m     - retrying click action[22m
    [2m       - waiting 500ms[22m


      564 |     if (buttonCount > 0) {
      565 |       const firstButton = buttons.first();
    > 566 |       await firstButton.click();
          |                         ^
      567 |       await page.waitForTimeout(500);
      568 |       console.log('‚úÖ Button click functionality working');
      569 |     }
        at /Users/peterhanssens/consulting/CloudShuttle/radix-ui/tests/interactive-components.spec.ts:566:25

    attachment #1: screenshot (image/png) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    test-results/interactive-components-Int-4597a-alidation-and-State-Changes-chromium-retry1/test-failed-1.png
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    attachment #2: video (video/webm) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    test-results/interactive-components-Int-4597a-alidation-and-State-Changes-chromium-retry1/video.webm
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    Error Context: test-results/interactive-components-Int-4597a-alidation-and-State-Changes-chromium-retry1/error-context.md

    attachment #4: trace (application/zip) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    test-results/interactive-components-Int-4597a-alidation-and-State-Changes-chromium-retry1/trace.zip
    Usage:

        pnpm exec playwright show-trace test-results/interactive-components-Int-4597a-alidation-and-State-Changes-chromium-retry1/trace.zip

    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

  3 failed
    [chromium] ‚Ä∫ tests/interactive-components.spec.ts:216:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ ContextMenu Deep Interaction - Right-click, Positioning, and Context 
    [chromium] ‚Ä∫ tests/interactive-components.spec.ts:351:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ ScrollArea Deep Interaction - Scrolling, Viewport, and Scrollbars 
    [chromium] ‚Ä∫ tests/interactive-components.spec.ts:485:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ Form Components Deep Interaction - Input, Validation, and State Changes 
  5 passed (3.6m)
