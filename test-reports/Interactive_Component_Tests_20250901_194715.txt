
Running 8 tests using 1 worker

üé† Testing Carousel Deep Interactions...
Found 7 next buttons and 7 previous buttons
‚úÖ Next navigation working
‚úÖ Previous navigation working
Found 21 indicators
‚úÖ Indicator navigation working
Found 0 autoplay carousels
  ‚úì  1 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:19:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ Carousel Deep Interaction - Navigation, Indicators, and Autoplay (8.1s)
Console Warning: cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation
üìë Testing Tabs Deep Interactions...
Found 23 tabs
Testing tab: Account
Testing tab: Password
Testing tab: Notifications
‚úÖ Keyboard navigation working
  ‚úì  2 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:87:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ Tabs Deep Interaction - Switching, Content Updates, and State Management (3.0s)
üîΩ Testing DropdownMenu Deep Interactions...
Console Warning: At examples/src/dropdown_menu_examples.rs:101:69, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/dropdown_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/dropdown_menu_examples.rs:108:69, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/dropdown_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/dropdown_menu_examples.rs:115:69, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/dropdown_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/dropdown_menu_examples.rs:138:64, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/dropdown_menu_examples.rs:9:38) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/dropdown_menu_examples.rs:144:66, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/dropdown_menu_examples.rs:10:42) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/dropdown_menu_examples.rs:172:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/dropdown_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/dropdown_menu_examples.rs:179:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/dropdown_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/dropdown_menu_examples.rs:186:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/dropdown_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/dropdown_menu_examples.rs:193:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/dropdown_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/dropdown_menu_examples.rs:200:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/dropdown_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Found 6 dropdown triggers
Found 10 menu items
‚úÖ Menu item selection working
Found 0 submenu triggers
Menubar content remained visible after close attempt; continuing test
  ‚úì  3 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:137:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ DropdownMenu Deep Interaction - Complex Menu Structures and Submenus (7.7s)
üñ±Ô∏è Testing ContextMenu Deep Interactions...
Found 0 context menu triggers
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:97:60, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/context_menu_examples.rs:9:38) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:366:19, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:353:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:103:62, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/context_menu_examples.rs:10:42) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:366:19, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:353:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:135:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:142:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:149:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:174:61, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:181:61, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:188:61, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:195:61, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:202:61, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:324:60, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/context_menu_examples.rs:9:38) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:366:19, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:353:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:330:62, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/context_menu_examples.rs:10:42) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:366:19, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:353:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:341:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/context_menu_examples.rs:348:65, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/context_menu_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
‚úÖ Context menu positioned correctly
Found 21 context menu items
‚úÖ Context menu item selection working
  ‚úì  4 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:216:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ ContextMenu Deep Interaction - Right-click, Positioning, and Context (3.7s)
Console Warning: cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation
üçî Testing Menubar Deep Interactions...
Found 0 menubar triggers
Console Warning: At examples/src/menubar_examples.rs:17:68, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/menubar_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/menubar_examples.rs:18:70, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/menubar_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/menubar_examples.rs:19:70, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/menubar_examples.rs:11:40) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/menubar_examples.rs:20:80, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/menubar_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/menubar_examples.rs:21:78, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/menubar_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At examples/src/menubar_examples.rs:22:78, you access a reactive_graph::signal::read::ReadSignal<alloc::string::String> (defined at examples/src/menubar_examples.rs:8:48) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:212:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:9:38) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:212:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:10:42) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:271:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:17:50) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:271:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:18:52) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:271:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:19:52) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:212:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:9:38) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:212:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:10:42) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:271:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:17:50) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:271:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:18:52) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:271:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:19:52) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:271:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:20:58) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:271:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:21:56) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:271:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:22:56) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:212:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:13:38) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Console Warning: At crates/radix-leptos-primitives/src/components/menubar.rs:212:43, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at examples/src/menubar_examples.rs:14:42) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Found 37 menubar items
Found 0 submenu triggers
‚úÖ Horizontal keyboard navigation working
  ‚úì  5 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:288:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ Menubar Deep Interaction - Multi-level Navigation and State Management (3.4s)
Console Warning: cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation
üìú Testing ScrollArea Deep Interactions...
Found 0 scroll areas
‚ö†Ô∏è  No viewport scroll areas found, trying main container...
‚ö†Ô∏è  No data-attribute scroll areas found, trying CSS classes...
Found 0 scroll areas
‚ùå No scroll areas found with any selector
  ‚úì  6 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:358:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ ScrollArea Deep Interaction - Scrolling, Viewport, and Scrollbars (1.0s)
üçû Testing Toast Deep Interactions...
Found 0 toast triggers
Found 0 active toasts
Found 0 toast content elements
Found 0 toast actions
Found 0 toast close buttons
  ‚úì  7 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:448:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ Toast Deep Interaction - Multiple Toasts, Stacking, and Dismissal (5.4s)
Console Warning: cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation
üìù Testing Form Components Deep Interactions...
Console Warning: At crates/radix-leptos-primitives/src/components/context_menu.rs:85:16, you access a reactive_graph::signal::read::ReadSignal<bool> (defined at crates/radix-leptos-primitives/src/components/context_menu.rs:40:34) outside a reactive tracking context. This might mean your app is not responding to changes in signal values in the way you expect.

Here‚Äôs how to fix it:

1. If this is inside a `view!` macro, make sure you are passing a function, not a value.
  ‚ùå NO  <p>{x.get() * 2}</p>
  ‚úÖ YES <p>{move || x.get() * 2}</p>

2. If it‚Äôs in the body of a component, try wrapping this access in a closure: 
  ‚ùå NO  let y = x.get() * 2
  ‚úÖ YES let y = move || x.get() * 2.

3. If you‚Äôre *trying* to access the value without tracking, use `.get_untracked()` or `.with_untracked()` instead.
Found 2 text inputs
‚úÖ Text input functionality working
Found 0 checkboxes
Found 0 radio buttons
Found 0 select dropdowns
Found 9 visible buttons
‚úÖ Button click functionality working
  ‚úì  8 [chromium] ‚Ä∫ tests/interactive-components.spec.ts:513:7 ‚Ä∫ Interactive Components Deep Testing ‚Ä∫ Form Components Deep Interaction - Input, Validation, and State Changes (2.2s)

  8 passed (35.4s)
